// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import http "net/http"

import mock "github.com/stretchr/testify/mock"
import model "github.com/MathieuDoyon/bookshelf/server/model"
import objectid "github.com/mongodb/mongo-go-driver/bson/objectid"

// IBookRepository is an autogenerated mock type for the IBookRepository type
type IBookRepository struct {
	mock.Mock
}

// BookCtx provides a mock function with given fields: next
func (_m *IBookRepository) BookCtx(next http.Handler) http.Handler {
	ret := _m.Called(next)

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// Create provides a mock function with given fields: book
func (_m *IBookRepository) Create(book *model.Book) (*model.Book, error) {
	ret := _m.Called(book)

	var r0 *model.Book
	if rf, ok := ret.Get(0).(func(*model.Book) *model.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ID
func (_m *IBookRepository) Delete(ID objectid.ObjectID) (int64, error) {
	ret := _m.Called(ID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(objectid.ObjectID) int64); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(objectid.ObjectID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ID
func (_m *IBookRepository) Get(ID string) (*model.Book, error) {
	ret := _m.Called(ID)

	var r0 *model.Book
	if rf, ok := ret.Get(0).(func(string) *model.Book); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filters, sorting
func (_m *IBookRepository) List(filters *model.BookFilter, sorting *model.Sorting) ([]model.Book, error) {
	ret := _m.Called(filters, sorting)

	var r0 []model.Book
	if rf, ok := ret.Get(0).(func(*model.BookFilter, *model.Sorting) []model.Book); ok {
		r0 = rf(filters, sorting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.BookFilter, *model.Sorting) error); ok {
		r1 = rf(filters, sorting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: book
func (_m *IBookRepository) Update(book *model.Book) (*model.Book, error) {
	ret := _m.Called(book)

	var r0 *model.Book
	if rf, ok := ret.Get(0).(func(*model.Book) *model.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
